#!/usr/bin/env python3
"""
Analyze the binary data generated by programs_6502.py
"""

import sys
import os

# Add the python_bindings directory to the path
sys.path.insert(0, os.path.join(os.path.dirname(__file__)))

from programs_6502 import Programs6502

def analyze_binary():
    """Analyze the binary data generated by hello_world()"""

    programs = Programs6502()
    hello_world_info = programs.hello_world()
    binary_data = hello_world_info['binary']

    print(f"Binary data length: {len(binary_data)} bytes")
    print("\nFull binary in hex:")
    for i in range(0, len(binary_data), 16):
        chunk = binary_data[i:i+16]
        hex_str = ' '.join(f'{b:02X}' for b in chunk)
        ascii_str = ''.join(chr(b) if 32 <= b <= 126 else '.' for b in chunk)
        print(f"{i:04X}: {hex_str:<48} | {ascii_str}")

    print("\nSearching for character data...")
    # Look for the Hello World characters
    hello_world = "HELLO WORLD!"

    # Search for each character in the binary
    for i, char in enumerate(hello_world):
        expected_ascii = ord(char)
        wrong_value = expected_ascii & 0x3F  # Clear bit 6 (subtract 0x40)

        print(f"\nCharacter '{char}' (0x{expected_ascii:02X}):")
        print(f"  Expected in binary: 0x{expected_ascii:02X}")
        print(f"  Wrong value (bit 6 cleared): 0x{wrong_value:02X}")

        # Find occurrences in binary
        for j, byte_val in enumerate(binary_data):
            if byte_val == expected_ascii:
                print(f"    Found correct value 0x{expected_ascii:02X} at offset {j:04X}")
            elif byte_val == wrong_value:
                print(f"    Found wrong value 0x{wrong_value:02X} at offset {j:04X}")

    print("\nLooking for the sequence that generates the characters...")

    # The captured values were [0x08, 0x05, 0x0C, 0x0C, 0x0F, 0x20, 0x17, 0x0F, 0x12, 0x0C, 0x04, 0x21]
    captured_values = [0x08, 0x05, 0x0C, 0x0C, 0x0F, 0x20, 0x17, 0x0F, 0x12, 0x0C, 0x04, 0x21]

    print(f"\nSearching for captured character sequence in binary:")
    for val in captured_values:
        positions = []
        for j, byte_val in enumerate(binary_data):
            if byte_val == val:
                positions.append(j)
        print(f"  0x{val:02X}: found at positions {[f'{p:04X}' for p in positions]}")

if __name__ == "__main__":
    analyze_binary()
