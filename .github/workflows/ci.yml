name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        cc: [gcc, clang]
        exclude:
          - os: windows-latest
            cc: clang

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install gcc

    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Windows dependencies handled by GitHub Actions runner

    - name: Build simulator
      run: |
        make clean
        CC=${{ matrix.cc }} make all
      env:
        CC: ${{ matrix.cc }}

    - name: Run tests
      run: |
        make test-quick

    - name: Test specific build configurations
      run: |
        make clean
        CC=${{ matrix.cc }} make debug

  coverage:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential gcov

    - name: Build with coverage
      run: |
        CFLAGS="-fprofile-arcs -ftest-coverage" LDFLAGS="-lgcov --coverage" make all

    - name: Run tests with coverage
      run: |
        make test-quick || true

    - name: Generate coverage report
      run: |
        gcov src/*.c
        ls -la *.gcov

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./*.gcov
        flags: unittests
        name: codecov-umbrella

  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install static analysis tools
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck clang-format

    - name: Run cppcheck
      run: |
        cppcheck --enable=all --suppress=missingIncludeSystem --error-exitcode=1 src/ tests/

    - name: Check code formatting
      run: |
        find src tests -name "*.c" -o -name "*.h" | xargs clang-format --dry-run --Werror

  release:
    runs-on: ubuntu-latest
    needs: [test, coverage, lint]
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')

    steps:
    - uses: actions/checkout@v4

    - name: Build release
      run: |
        make clean
        make all

    - name: Create release package
      run: |
        mkdir -p release
        tar -czf release/sim65-${{ github.ref_name }}.tar.gz src tests asm Makefile README.md

    - name: Upload release assets
      uses: actions/upload-artifact@v3
      with:
        name: sim65-${{ github.ref_name }}
        path: release/
